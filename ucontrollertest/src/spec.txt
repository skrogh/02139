Flags/Registers:
C:	Carry

I/O regiters:
TG(8):	Toggle switches
LD(8):	LEDs over toggles



ST:	Stack
SP:	Stack pointer

Rd:	destinatrion register
Rs:	source register
k:	immediate (4bit)
K:	byte (8bit)

name:	Operands	Function		Flags

MIC:
nop						

Arithmetics:
add	Rd, Rs		Rd = Rd + Rs		C
			C = (Rd + Rs) > 0xFF
addc	Rd, Rs		Rd = Rd + Rs + C	C
			C = (Rd + Rs + C) > 0xFF
addi	Rd, k		Rd = Rd + k		C
			C = (Rd + k) > 0xFF
sub	Rd, Rs		Rd = Rd - Rs		C
			C = Rs > Rd
subi	Rd, k		Rd = Rd - k		C
			C = k > Rd
subc	Rd, Rs		Rd = Rd - Rs - C	C
			C = Rs - C > Rd
inv	Rd		Rd = - Rd
inc;	see addi
dec;	see subi
zer	Rd		C = Rd == 0		C
multiply?
divide?

Boolean
and	Rd, Rs		Rd = Rd & Rs
andi	Rd, k		Rd = Rd(0..3) & k
or	Rd, Rs		Rd = Rd | Rs
ori	Rd		Rd = Rd(0..3) | k
xor	Rd, Rs		Rd = Rd xor Rs
not	Rd, Rs		Rd = !Rd
sbr;	see ori
cbr	Rd, k		Rd = Rd(0..3) & !k
shl	Rd		Rd(n+1) = Rd(n)		C
			Rd(0) = 0
			C = Rd(7)
shr	Rd		Rd(n) = Rd(n+1)		C
			Rd(7) = 0
			C = Rd(0)	
shl	Rd		Rd(n+1) = Rd(n)		C
			Rd(0) = C
			C = Rd(7)
shr	Rd		Rd(n) = Rd(n+1)		C
			Rd(7) = C
			C = Rd(0)		

Nibble manipulation:
swn	Rd, (Rs?)	Rd(4..7) = Rd(0..3)
			Rd(0..3) = Rd(4..7)
shn	Rd, k		Rd(0..3) = k
sln	Rd, k		Rd(4..7) = k
res	Rd		Rd = 0

Moving:
mov	Rd, Rs		Rd = Rs
loi	Rd, Rs		Rd = RAM(Rs)
lod	Rd, k		Rd = RAM(k)
loz	K		R0 = RAM(K)

Jumps n calls:
jmpp	K		PC = PC + K
jmpn	K		PC = Pc - K
jmpa	K		PC = K
jmpx	Rd, Rs		PC = (Rd(0..7)..Rs(0..7))	

Compare:
com; see sub, subc, subi, zer, shl
brnp	K		C=0: PC = PC + 1
			C=1: PC = PC + K

brnn	K		C=0: PC = PC + 1
			C=1: PC = PC - K 

stack:
push			ST(SP) = PC + 1
			SP = SP + 1
pop			PC = ST(SP)
			SP = SP - 1
pusr	Rd		ST(SP) = Rs
			SP = SP + 1
popr	Rd		Rd = ST(SP)
			SP = SP - 1




For first test:

Mic:
0	nop

Arithmetics:
01	add	Rd, Rs		Rd = Rd + Rs		C
			C = (Rd + Rs) > 0xFF
10	sub	Rd, Rs		Rd = Rd - Rs		C
			C = Rs > Rd

Nibble manipulation:
11	sln	Rd, k		Rd(0..3) = k
100	shn	Rd, k		Rd(4..7) = k
101	res	Rd		Rd = 0

Moving:
110	mov	Rd, Rs		Rd = Rs

Jumps n calls:
111	jmpa	K		PC = K
1000	jmpp	K		PC = +K
1001	jmpn	K		PC = -K

Compare:

1010	brnp	K		C=0: PC = PC + 1
			C=1: PC = PC + K

1011	brnn	K		C=0: PC = PC + 1
			C=1: PC = PC - K 
//I/O
//8 bit til switches
//8 bits til dioder

//1100	rii	Rd		Rd = TG
//1101	rio	Rd		Rd = LD
//1110	sio	Rd		LD = Rd
//1111	sdo	K		LD = K

I/O
16 8-bit I/O regs separate from internal regs
1100    rio Rd, Rs  Rd = IO(RS)
1101    sio Rd, Rs  IO(Rd) = Rs

Set r0 to 8-bit value instead of using 2x nibble ops
1110    sbr K       r0 = K

RAM ops
1111 	sri K 		ram address = K
10000 	sra Rs 		ram adress = valueof(Rs)
10001	srvi K 		ram value = K
10010 	srvr Rs 	ram value = valueof(Rs)
10011 	rra Rd 		read ram value into Rd
